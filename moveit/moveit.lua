-- title:  Move It, Man!
-- author: Shaun Brandt
-- desc:   A small Sokoban clone
-- script: lua

-- Contains all of the level data.  See notes.txt for details about the format.
g_levs={
 {9,9,30,120,'hjjjgXXXXk@  kXXXXk $$kXhjgk $ kXk.king ijf.kXmf    .kXk   b  kXk   mjjfXijjjfXXX'}
}
g_state={}

--------------------------------------------------------------------------------
-- loadlevel
--
-- Loads and parses a level from the g_levs table.  Places the resulting data
-- into the g_state object so it can be used in other parts of the game.
-- See notes.txt for a list of the fields in g_state.
--
-- Note: The Lua 1-based tables make sorting out values difficult when most
-- languages used 0-based arrays.  This function uses a source string with
-- a 1-based index, and the destination tables will also be 1-based, but the
-- (x,y) coordinates saved will be 0-based.
--
-- 1-based:
--   g_levs
--   g_levs[5]
--   g_state.lv, g_state.bx, g_state.tg
-- 0-based:
--   x, y
--------------------------------------------------------------------------------
function loadlevel(l_num)
  g_state.l=l_num
  g_state.w=g_levs[l_num][1]
  g_state.h=g_levs[l_num][2]
  g_state.tt=g_levs[l_num][3]
  g_state.tm=g_levs[l_num][4]
  g_state.lv={}
  g_state.bx={}
  g_state.tg={}
  g_state.nt=0
  g_state.ot=0
  g_state.t=0
  g_state.et=0	
  g_state.pd=0
  -- Iterate through the string in row order
  for y=0, g_state.h-1 do
    for x=0, g_state.w-1 do
      -- Find the character in the string corresponding to the level position
      -- at (x,y)
      off=(y)*g_state.w+x+1
      c=string.sub(g_levs[l_num][5],off,off)
      if c=="@" then
        -- If the player position is found, initialize it and place an empty space
        -- in the level data
        g_state.p={x,y}
        table.insert(g_state.lv,' ')
      elseif c=="$" then
        -- If a box is found, add it to the list of boxes and place an empty space
        -- in the level data
        table.insert(g_state.bx,{x,y})
        table.insert(g_state.lv,' ')
      elseif c=="." then
        -- If a target square is found, add it to the list of targets and
        -- place the target in the level data
        table.insert(g_state.tg,{x,y})
        table.insert(g_state.lv,c)
        g_state.nt=g_state.nt+1
      elseif c=="*" then
        -- If a box on a target is found, add the box and target to their
        -- respective lists and place the target in the level data
        table.insert(g_state.bx,{x,y})
        table.insert(g.state.tg,{x,y})
        table.insert(g_state,lv,'.')
      else
        -- Otherwise, just keep the level data as-is
        table.insert(g_state.lv,c)
      end
    end
  end
end

--------------------------------------------------------------------------------
-- get_ul
--
-- Gets the position on the screen's tilemap that corresponds to where the
-- upper left corner of the level is.  The level is always (roughly) centered
-- on the screen.
--------------------------------------------------------------------------------
function get_ul()
  lv_x=10-math.floor(g_state.w/2)
  lv_y=8-math.floor(g_state.h/2)
  return lv_x, lv_y
end

--------------------------------------------------------------------------------
-- render_level
--
-- Updates the tile map to place the static elements of the level into the
-- tile map, and then draws the appropriate region to the screen.
--------------------------------------------------------------------------------
function render_level()
  -- Put the background tile into the correct regions of the screen
  for x=0,19 do
    for y=0,16 do
      mset(x,y,4)
    end
  end

  -- Find the center of the area designated for the level.  The area is 20x17,
  -- so things won't be 100% centered, but any level up to 20x17 should fit.
  lv_x,lv_y=get_ul()
				
  -- Iterate through the level data
  for y=0,g_state.h-1 do
    for x=0,g_state.w-1 do
      -- Find the offset into the string.  Get the ASCII value of the character
      off=y*g_state.w+x+1
      b=string.byte(g_state.lv[off])						
      if b>=97 and b<=111 then
        -- If the character falls between a and p (97 and 112), subtract 97 and
        -- use the remainder as an index into the tilemap for the appropriate
        -- wall tile (they're held in indices 16-31)
        mset(lv_x+x,lv_y+y,16+(b-97))
      elseif b==32 then
        -- If the character is a space, set a floor tile
        mset(lv_x+x,lv_y+y,3)
      elseif b==46 then
        -- If the characeter is a target square, set a target tile.
        mset(lv_x+x,lv_y+y,2)
      end
    end
  end
  -- render the appropriate part of the tile map to the screen
  map(0,0,30,17)		 
end

--------------------------------------------------------------------------------
-- render_sprites
--
-- Draws the non-static elements of the screen - this includes the player
-- and boxes.
--------------------------------------------------------------------------------
function render_sprites()
  -- Find the center of the area designated for the level.  The area is 20x17,
  -- so things won't be 100% centered, but any level up to 20x17 should fit.
  lv_x,lv_y=get_ul()

  for x=1,#g_state.bx do
    spr(256,8*(lv_x+g_state.bx[x][1]),8*(lv_y+g_state.bx[x][2]),0)
  end		
  -- Draw the player.  Uses g_state.pd to draw the appropriate direction of
  -- the player sprite.
  spr(257+g_state.pd,8*(lv_x+g_state.p[1]),8*(lv_y+g_state.p[2]),0)
end

--------------------------------------------------------------------------------
-- is_wall
--
-- Determines whether the specified location is a wall or not.
--------------------------------------------------------------------------------
function is_wall(x,y)
  -- Get the upper left position of the level
  lv_x, lv_y=get_ul()

  -- get the tile at (x,y) relative to the upper left
  tile=mget(lv_x+x,lv_y+y)
  -- The tiles with indices 16-31 are the wall tiles
  if tile>=16 and tile <=31 then
    return true
  end
  return false
end

--------------------------------------------------------------------------------
-- is_target
--
-- Determines whether the specified location is a target square
--------------------------------------------------------------------------------
function is_target(x,y)
  for i=1,#g_state.tg do
    if g_state.tg[i][1]==x and g_state.tg[i][2]==y then
      return true
    end
  end
  return false
end

--------------------------------------------------------------------------------
-- is_box
--
-- Determines whether the specified location contains a box or not
--------------------------------------------------------------------------------
function is_box(x,y)
  for i=1,#g_state.bx do
    if g_state.bx[i][1]==x and g_state.bx[i][2]==y then
      return true
    end
  end
  return false
end

--------------------------------------------------------------------------------
-- move_box
--
-- Moves a box from (sx,sy) to (dx,dy).  Updates the box structure with the
-- new box location, and updates the number of boxes placed on targets.
--------------------------------------------------------------------------------
function move_box(sx, sy, dx, dy)
  for i=1,#g_state.bx do
    if g_state.bx[i][1]==sx and g_state.bx[i][2]==sy then
      -- If the box is currently on a target, reduce the target count by 1
      if is_target(sx,sy)==true then
        g_state.ot=g_state.ot-1
      end
      g_state.bx[i][1]=dx
      g_state.bx[i][2]=dy
      -- If the box is now on a target, increase the target count by 1
      if is_target(dx,dy)==true then
        g_state.ot=g_state.ot+1
      end
      moved=true
    end
  end
end

--------------------------------------------------------------------------------
-- process_input
--
-- Handles input.
--------------------------------------------------------------------------------
function process_input()
  -- c_x and c_y are the candidate movement location for the player based on
  -- the button they pressed
  -- b_x and b_y are the position beyond that in the same direction.  This
  -- will be used if a player pushes into a box that may or may not itself move
  -- depending on what's behind it.
  --
  -- Algorithm for movement key processing:
  --  - get the keypress
  --  - If a movement key was pressed:
  --    - set the candidate location to the adjacent spot in that direction
  --    - set the beyond location to one additional spot beyond that
  --    - If the candidate location is a wall, don't move.
  --    - If the candidate location has a box, then check the beyond space.
  --      - If the space beyond is empty, move the player and the box
  --      - If the space beyond is a wall or another box, don't move
  --    - If the candidate location is empty, move the player.
  c_x=g_state.p[1]
  c_y=g_state.p[2]
  b_x=g_state.p[1]
  b_y=g_state.p[2]
  movekey = false

  if keyp(58) then      -- Up key
    c_y=c_y-1
    b_y=c_y-1
    g_state.pd=3
    movekey=true
  elseif keyp(59) then  -- Down key
    c_y=c_y+1
    b_y=c_y+1
    g_state.pd=1
    movekey=true
  elseif keyp(60) then  -- Left key
    c_x=c_x-1
    b_x=c_x-1
    g_state.pd=2
    movekey=true
  elseif keyp(61) then  -- Right key
    c_x=c_x+1
    b_x=c_x+1
    g_state.pd=0
    movekey=true
  end

  if movekey==true then    
    if is_wall(c_x,c_y)==false then
      if is_box(c_x,c_y)==true then
        if is_wall(b_x,b_y)==false and is_box(b_x,b_y)==false then
          move_box(c_x,c_y,b_x,b_y)
          g_state.p[1]=c_x
          g_state.p[2]=c_y
          level_done()
        end
      else
        g_state.p[1]=c_x
        g_state.p[2]=c_y
      end
    end
  end
end

function level_done()
  if g_state.nt == g_state.ot then
    trace("Done!")
    return true
  end
  return false
end

function TIC()
  render_level()
  render_sprites()		
  process_input()
end

loadlevel(1)
-- <TILES>
-- 002:bbbbbbbbbbbbbbbbbb0bb0bbbbb00bbbbbb00bbbbb0bb0bbbbbbbbbbbbbbbbbb
-- 003:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 004:2020202002020202202020200202020220202020020202022020202002020202
-- 005:0220022020022002200220020220022002200220200220022002200202200220
-- 006:6666666666666666666666666666666666666666666666666666666666666666
-- 016:333333333aaaaaa33a7777a33a7777a33a7777a33a7777a33aaaaaa333333333
-- 017:333333333aaaaaa33a7777a33a7777a33a7777a33a7777a33a7777a33a7777a3
-- 018:333333333aaaaaaa3a7777773a7777773a7777773a7777773aaaaaaa33333333
-- 019:3a7777a33a7777a33a7777a33a7777a33a7777a33a7777a33aaaaaa333333333
-- 020:33333333aaaaaaa3777777a3777777a3777777a3777777a3aaaaaaa333333333
-- 021:3a7777a3aa7777a3777777a3777777a3777777a3777777a3aaaaaaa333333333
-- 022:33333333aaaaaaa3777777a3777777a3777777a3777777a3aa7777a33a7777a3
-- 023:333333333aaaaaaa3a7777773a7777773a7777773a7777773a7777aa3a7777a3
-- 024:3a7777a33a7777aa3a7777773a7777773a7777773a7777773aaaaaaa33333333
-- 025:33333333aaaaaaaa77777777777777777777777777777777aaaaaaaa33333333
-- 026:3a7777a33a7777a33a7777a33a7777a33a7777a33a7777a33a7777a33a7777a3
-- 027:3a7777a3aa7777aa77777777777777777777777777777777aaaaaaaa33333333
-- 028:3a7777a33a7777aa3a7777773a7777773a7777773a7777773a7777aa3a7777a3
-- 029:33333333aaaaaaaa77777777777777777777777777777777aa7777aa3a7777a3
-- 030:3a7777a3aa7777a3777777a3777777a3777777a3777777a3aa7777a33a7777a3
-- 031:3a7777a3aa7777aa77777777777777777777777777777777aa7777aa3a7777a3
-- 032:0055555505bbbbbb5bbbbbbb5bbb55555bb500005bb500005bb500005bb50000
-- 033:5bb500005bb500005bb500005bb500005bb500005bb500005bb500005bb50000
-- 034:5bb500005bb500005bb500005bb500005bbb55555bbbbbbb05bbbbbb00555555
-- 035:55555500bbbbbb50bbbbbbb55555bbb500005bb500005bb500005bb500005bb5
-- 036:00005bb500005bb500005bb500005bb500005bb500005bb500005bb500005bb5
-- 037:00005bb500005bb500005bb500005bb55555bbb5bbbbbbb5bbbbbb5055555500
-- 038:55555555bbbbbbbbbbbbbbbb5555555500000000000000000000000000000000
-- 039:0000000000000000000000000000000055555555bbbbbbbbbbbbbbbb55555555
-- </TILES>

-- <SPRITES>
-- 000:011111101494494119c99c91149449411494494119c99c911494494101111110
-- 001:000cc000000cc00000444400044444f0044444f000444400000cc000000cc000
-- 002:000000000004400000444400cc4444cccc4444cc00444400000ff00000000000
-- 003:000cc000000cc000004444000f4444400f44444000444400000cc000000cc000
-- 004:00000000000ff00000444400cc4444cccc4444cc004444000004400000000000
-- </SPRITES>

-- <MAP>
-- 000:606060606060606060606060606060606060606002626262626262626232000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:606060606060606060606060606060606060606012000000000000000042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:606060606060606060606060606060606060606022727272727272727252000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
-- </SFX>

-- <PALETTE>
-- 000:140c1c44243430346d4e4a4e854c30346524d04648757161597dced27d2c8595a16dae2cd2aa996dc2cadad45edeeeda
-- </PALETTE>

